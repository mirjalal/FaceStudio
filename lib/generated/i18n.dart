import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unnecessary_brace_in_string_interps

//WARNING: This file is automatically generated. DO NOT EDIT, all your changes would be lost.

typedef LocaleChangeCallback = void Function(Locale locale);

class I18n implements WidgetsLocalizations {
  const I18n();
  static Locale _locale;
  static bool _shouldReload = false;

  static set locale(Locale newLocale) {
    _shouldReload = true;
    I18n._locale = newLocale;
  }

  static const GeneratedLocalizationsDelegate delegate = GeneratedLocalizationsDelegate();

  /// function to be invoked when changing the language
  static LocaleChangeCallback onLocaleChanged;

  static I18n of(BuildContext context) =>
    Localizations.of<I18n>(context, WidgetsLocalizations);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  /// "Sign in to FaceStudio"
  String get signInPageTitle => "Sign in to FaceStudio";
  /// "Use your Google Account"
  String get googleSignIn => "Use your Google Account";
  /// "Email"
  String get email => "Email";
  /// "Please enter valid email"
  String get enterValidEmail => "Please enter valid email";
  /// "Password"
  String get password => "Password";
  /// "Please enter 8 symbols at least"
  String get passwordLengthError => "Please enter 8 symbols at least";
  /// "Sign in"
  String get signIn => "Sign in";
  /// "Register"
  String get gotoRegistrationPage => "Register";
  /// "Create an account"
  String get registrationPageTitle => "Create an account";
  /// "Name"
  String get name => "Name";
  /// "Surname"
  String get surname => "Surname";
  /// "Birthdate"
  String get birthdate => "Birthdate";
  /// "Choose profile image"
  String get pickImage => "Choose profile image";
  /// "Confirm"
  String get confirmPassword => "Confirm";
  /// "Those passwords didn't match. Try again."
  String get passwordsNotMatch => "Those passwords didn't match. Try again.";
  /// "Register"
  String get register => "Register";
  /// "Almost done..."
  String get almostDone => "Almost done...";
  /// "We've sent an email to ${email}. Open it up to activate your account."
  String verifyEmail(String email) => "We've sent an email to ${email}. Open it up to activate your account.";
  /// "Welcome ${username}"
  String welcome(String username) => "Welcome ${username}";
  /// "Logout"
  String get logout => "Logout";
}

class _I18n_en_US extends I18n {
  const _I18n_en_US();

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class _I18n_az_AZ extends I18n {
  const _I18n_az_AZ();

  /// "FaceStudio-ya daxil olun"
  @override
  String get signInPageTitle => "FaceStudio-ya daxil olun";
  /// "Google Hesabınızı istifadə edin"
  @override
  String get googleSignIn => "Google Hesabınızı istifadə edin";
  /// "E-poçt"
  @override
  String get email => "E-poçt";
  /// "Düzgün e-poçt daxil edin"
  @override
  String get enterValidEmail => "Düzgün e-poçt daxil edin";
  /// "Şifrə"
  @override
  String get password => "Şifrə";
  /// "Ən az 8 simvol daxil edin"
  @override
  String get passwordLengthError => "Ən az 8 simvol daxil edin";
  /// "Daxil ol"
  @override
  String get signIn => "Daxil ol";
  /// "Qeydiyyat"
  @override
  String get gotoRegistrationPage => "Qeydiyyat";
  /// "Hesab yarat"
  @override
  String get registrationPageTitle => "Hesab yarat";
  /// "Ad"
  @override
  String get name => "Ad";
  /// "Soyad"
  @override
  String get surname => "Soyad";
  /// "Doğum tarixi"
  @override
  String get birthdate => "Doğum tarixi";
  /// "Profil şəklini seçin"
  @override
  String get pickImage => "Profil şəklini seçin";
  /// "Təsdiq edin"
  @override
  String get confirmPassword => "Təsdiq edin";
  /// "Bu parollar üst-üstə düşmədi. Yenidən cəhd edin."
  @override
  String get passwordsNotMatch => "Bu parollar üst-üstə düşmədi. Yenidən cəhd edin.";
  /// "Qeydiyyatdan keç"
  @override
  String get register => "Qeydiyyatdan keç";
  /// "Demək olar ki hazırdır..."
  @override
  String get almostDone => "Demək olar ki hazırdır...";
  /// "Təsdiqləmə məktubu ${email} ünvanına göndərildi. Hesabınızı aktivləşdirmək üçün keçidə daxil olun."
  @override
  String verifyEmail(String email) => "Təsdiqləmə məktubu ${email} ünvanına göndərildi. Hesabınızı aktivləşdirmək üçün keçidə daxil olun.";
  /// "Xoş gəldiniz ${username}"
  @override
  String welcome(String username) => "Xoş gəldiniz ${username}";
  /// "Çıxış"
  @override
  String get logout => "Çıxış";

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class _I18n_ru_RU extends I18n {
  const _I18n_ru_RU();

  /// "Войдите в FaceStudio"
  @override
  String get signInPageTitle => "Войдите в FaceStudio";
  /// "Используйте аккаунт Google"
  @override
  String get googleSignIn => "Используйте аккаунт Google";
  /// "Эл. адрес"
  @override
  String get email => "Эл. адрес";
  /// "Неверный адрес электронной почты"
  @override
  String get enterValidEmail => "Неверный адрес электронной почты";
  /// "Пароль"
  @override
  String get password => "Пароль";
  /// "Используйте не менее 8 символов"
  @override
  String get passwordLengthError => "Используйте не менее 8 символов";
  /// "Войти"
  @override
  String get signIn => "Войти";
  /// "Регистрация"
  @override
  String get gotoRegistrationPage => "Регистрация";
  /// "Создать аккаунт"
  @override
  String get registrationPageTitle => "Создать аккаунт";
  /// "Имя"
  @override
  String get name => "Имя";
  /// "Фамилия"
  @override
  String get surname => "Фамилия";
  /// "Дата рождения"
  @override
  String get birthdate => "Дата рождения";
  /// "Выберите изображение профиля"
  @override
  String get pickImage => "Выберите изображение профиля";
  /// "Подтвердить"
  @override
  String get confirmPassword => "Подтвердить";
  /// "Пароли не совпадают. Повторите попытку."
  @override
  String get passwordsNotMatch => "Пароли не совпадают. Повторите попытку.";
  /// "Завершить регистрацию"
  @override
  String get register => "Завершить регистрацию";
  /// "Почти сделано..."
  @override
  String get almostDone => "Почти сделано...";
  /// "На адрес ${email} отправлено письмо. Проверьте почту для активации учетной записи."
  @override
  String verifyEmail(String email) => "На адрес ${email} отправлено письмо. Проверьте почту для активации учетной записи.";
  /// "Здравствуйте ${username}"
  @override
  String welcome(String username) => "Здравствуйте ${username}";
  /// "Выйти"
  @override
  String get logout => "Выйти";

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<WidgetsLocalizations> {
  const GeneratedLocalizationsDelegate();
  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", "US"),
      Locale("az", "AZ"),
      Locale("ru", "RU")
    ];
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      if (isSupported(locale)) {
        return locale;
      }
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    };
  }

  @override
  Future<WidgetsLocalizations> load(Locale locale) {
    I18n._locale ??= locale;
    I18n._shouldReload = false;
    final String lang = I18n._locale != null ? I18n._locale.toString() : "";
    final String languageCode = I18n._locale != null ? I18n._locale.languageCode : "";
    if ("en_US" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("az_AZ" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_az_AZ());
    }
    else if ("ru_RU" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_ru_RU());
    }
    else if ("en" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("az" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_az_AZ());
    }
    else if ("ru" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_ru_RU());
    }

    return SynchronousFuture<WidgetsLocalizations>(const I18n());
  }

  @override
  bool isSupported(Locale locale) {
    for (var i = 0; i < supportedLocales.length && locale != null; i++) {
      final l = supportedLocales[i];
      if (l.languageCode == locale.languageCode) {
        return true;
      }
    }
    return false;
  }

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => I18n._shouldReload;
}